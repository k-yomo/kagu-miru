// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"fmt"
	"io"
	"strconv"
)

type Item struct {
	ID            string              `json:"id"`
	Name          string              `json:"name"`
	Description   string              `json:"description"`
	Status        ItemStatus          `json:"status"`
	URL           string              `json:"url"`
	AffiliateURL  string              `json:"affiliateUrl"`
	Price         int                 `json:"price"`
	ImageUrls     []string            `json:"imageUrls"`
	AverageRating float64             `json:"averageRating"`
	ReviewCount   int                 `json:"reviewCount"`
	Platform      ItemSellingPlatform `json:"platform"`
}

type ItemConnection struct {
	PageInfo *PageInfo `json:"pageInfo"`
	Nodes    []*Item   `json:"nodes"`
}

type PageInfo struct {
	Page      int `json:"page"`
	TotalPage int `json:"totalPage"`
}

type SearchItemsInput struct {
	Query    string              `json:"query"`
	SortType SearchItemsSortType `json:"sortType"`
	Page     *int                `json:"page"`
	PageSize *int                `json:"pageSize"`
}

type ItemSellingPlatform string

const (
	ItemSellingPlatformRakuten ItemSellingPlatform = "RAKUTEN"
)

var AllItemSellingPlatform = []ItemSellingPlatform{
	ItemSellingPlatformRakuten,
}

func (e ItemSellingPlatform) IsValid() bool {
	switch e {
	case ItemSellingPlatformRakuten:
		return true
	}
	return false
}

func (e ItemSellingPlatform) String() string {
	return string(e)
}

func (e *ItemSellingPlatform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemSellingPlatform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemSellingPlatform", str)
	}
	return nil
}

func (e ItemSellingPlatform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ItemStatus string

const (
	ItemStatusActive   ItemStatus = "ACTIVE"
	ItemStatusInactive ItemStatus = "INACTIVE"
)

var AllItemStatus = []ItemStatus{
	ItemStatusActive,
	ItemStatusInactive,
}

func (e ItemStatus) IsValid() bool {
	switch e {
	case ItemStatusActive, ItemStatusInactive:
		return true
	}
	return false
}

func (e ItemStatus) String() string {
	return string(e)
}

func (e *ItemStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemStatus", str)
	}
	return nil
}

func (e ItemStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchItemsSortType string

const (
	SearchItemsSortTypeBestMatch   SearchItemsSortType = "BEST_MATCH"
	SearchItemsSortTypePriceAsc    SearchItemsSortType = "PRICE_ASC"
	SearchItemsSortTypePriceDesc   SearchItemsSortType = "PRICE_DESC"
	SearchItemsSortTypeReviewCount SearchItemsSortType = "REVIEW_COUNT"
	SearchItemsSortTypeRating      SearchItemsSortType = "RATING"
)

var AllSearchItemsSortType = []SearchItemsSortType{
	SearchItemsSortTypeBestMatch,
	SearchItemsSortTypePriceAsc,
	SearchItemsSortTypePriceDesc,
	SearchItemsSortTypeReviewCount,
	SearchItemsSortTypeRating,
}

func (e SearchItemsSortType) IsValid() bool {
	switch e {
	case SearchItemsSortTypeBestMatch, SearchItemsSortTypePriceAsc, SearchItemsSortTypePriceDesc, SearchItemsSortTypeReviewCount, SearchItemsSortTypeRating:
		return true
	}
	return false
}

func (e SearchItemsSortType) String() string {
	return string(e)
}

func (e *SearchItemsSortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchItemsSortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchItemsSortType", str)
	}
	return nil
}

func (e SearchItemsSortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
